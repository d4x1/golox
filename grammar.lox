program     ->  declaration * EOF ;
declaration -> varDeclaration | statement;
varDeclaration -> "var" IDENTIFIER ("=" expression)? ";" ;
statement   ->  exprStmt | forStmt | ifStmt| printStmt | whiteStemt |block ;
forStmt     -> "for" "(" (varDeclaration | exprStmt | ";") expression? ";"expression? ")" statement;
whiteStemt  -> "while" "(" expression")" statement ;
ifStmt      -> "if" "(" expression ")" statement ("else" statement)? ;
block       -> "{" declaration* "}" ;
exprStmt    ->  expression ";" ;
printStmt   ->  "print" expression ";" ;
// expression  ->  literal | unary | binary | grouping ;
expression  -> assignment ;
assignment  -> IDENTIFIER "=" assignment | logic_or ;
logic_or    -> logic_and ("or" logic_and)* ;
logic_and   -> equality ("and" equality)* ;
literal     ->  NUMBER | STRING | "true" | "false" | "nil" ;
unary       ->  ("-" | "+") expression ;
binary      ->  expression operator expression ;
operator    ->  "+" | "-" | "*" | "/" | "==" | "!=" | "<" | "<=" | ">" | ">=" ;
primary     -> "true" | "false" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "nil";

NUMBER      ->  DIGIT+ ( "." DIGIT+ )? ;
STRING      ->  "\"" <any char except "\"">* "\"" ;
IDENTIFIER  ->  ALPHA ( ALPHA | DIGIT )* ;
ALPHA       ->  "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT       ->  "0" ... "9" ;